/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PollOptionService } from "../pollOption.service";
import { PollOptionCreateInput } from "./PollOptionCreateInput";
import { PollOption } from "./PollOption";
import { PollOptionFindManyArgs } from "./PollOptionFindManyArgs";
import { PollOptionWhereUniqueInput } from "./PollOptionWhereUniqueInput";
import { PollOptionUpdateInput } from "./PollOptionUpdateInput";

export class PollOptionControllerBase {
  constructor(protected readonly service: PollOptionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PollOption })
  async createPollOption(
    @common.Body() data: PollOptionCreateInput
  ): Promise<PollOption> {
    return await this.service.createPollOption({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PollOption] })
  @ApiNestedQuery(PollOptionFindManyArgs)
  async pollOptions(@common.Req() request: Request): Promise<PollOption[]> {
    const args = plainToClass(PollOptionFindManyArgs, request.query);
    return this.service.pollOptions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PollOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pollOption(
    @common.Param() params: PollOptionWhereUniqueInput
  ): Promise<PollOption | null> {
    const result = await this.service.pollOption({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PollOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePollOption(
    @common.Param() params: PollOptionWhereUniqueInput,
    @common.Body() data: PollOptionUpdateInput
  ): Promise<PollOption | null> {
    try {
      return await this.service.updatePollOption({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PollOption })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePollOption(
    @common.Param() params: PollOptionWhereUniqueInput
  ): Promise<PollOption | null> {
    try {
      return await this.service.deletePollOption({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
