/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PollOption as PrismaPollOption } from "@prisma/client";

export class PollOptionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PollOptionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pollOption.count(args);
  }

  async pollOptions(
    args: Prisma.PollOptionFindManyArgs
  ): Promise<PrismaPollOption[]> {
    return this.prisma.pollOption.findMany(args);
  }
  async pollOption(
    args: Prisma.PollOptionFindUniqueArgs
  ): Promise<PrismaPollOption | null> {
    return this.prisma.pollOption.findUnique(args);
  }
  async createPollOption(
    args: Prisma.PollOptionCreateArgs
  ): Promise<PrismaPollOption> {
    return this.prisma.pollOption.create(args);
  }
  async updatePollOption(
    args: Prisma.PollOptionUpdateArgs
  ): Promise<PrismaPollOption> {
    return this.prisma.pollOption.update(args);
  }
  async deletePollOption(
    args: Prisma.PollOptionDeleteArgs
  ): Promise<PrismaPollOption> {
    return this.prisma.pollOption.delete(args);
  }
}
