/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Option } from "./Option";
import { OptionCountArgs } from "./OptionCountArgs";
import { OptionFindManyArgs } from "./OptionFindManyArgs";
import { OptionFindUniqueArgs } from "./OptionFindUniqueArgs";
import { CreateOptionArgs } from "./CreateOptionArgs";
import { UpdateOptionArgs } from "./UpdateOptionArgs";
import { DeleteOptionArgs } from "./DeleteOptionArgs";
import { Poll } from "../../poll/base/Poll";
import { OptionService } from "../option.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Option)
export class OptionResolverBase {
  constructor(
    protected readonly service: OptionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Option",
    action: "read",
    possession: "any",
  })
  async _optionsMeta(
    @graphql.Args() args: OptionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Option])
  @nestAccessControl.UseRoles({
    resource: "Option",
    action: "read",
    possession: "any",
  })
  async options(@graphql.Args() args: OptionFindManyArgs): Promise<Option[]> {
    return this.service.options(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Option, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Option",
    action: "read",
    possession: "own",
  })
  async option(
    @graphql.Args() args: OptionFindUniqueArgs
  ): Promise<Option | null> {
    const result = await this.service.option(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Option)
  @nestAccessControl.UseRoles({
    resource: "Option",
    action: "create",
    possession: "any",
  })
  async createOption(@graphql.Args() args: CreateOptionArgs): Promise<Option> {
    return await this.service.createOption({
      ...args,
      data: {
        ...args.data,

        poll: args.data.poll
          ? {
              connect: args.data.poll,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Option)
  @nestAccessControl.UseRoles({
    resource: "Option",
    action: "update",
    possession: "any",
  })
  async updateOption(
    @graphql.Args() args: UpdateOptionArgs
  ): Promise<Option | null> {
    try {
      return await this.service.updateOption({
        ...args,
        data: {
          ...args.data,

          poll: args.data.poll
            ? {
                connect: args.data.poll,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Option)
  @nestAccessControl.UseRoles({
    resource: "Option",
    action: "delete",
    possession: "any",
  })
  async deleteOption(
    @graphql.Args() args: DeleteOptionArgs
  ): Promise<Option | null> {
    try {
      return await this.service.deleteOption(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Poll, {
    nullable: true,
    name: "poll",
  })
  @nestAccessControl.UseRoles({
    resource: "Poll",
    action: "read",
    possession: "any",
  })
  async getPoll(@graphql.Parent() parent: Option): Promise<Poll | null> {
    const result = await this.service.getPoll(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
