/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BreakoutRoom as PrismaBreakoutRoom,
  Room as PrismaRoom,
} from "@prisma/client";

export class BreakoutRoomServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BreakoutRoomCountArgs, "select">
  ): Promise<number> {
    return this.prisma.breakoutRoom.count(args);
  }

  async breakoutRooms(
    args: Prisma.BreakoutRoomFindManyArgs
  ): Promise<PrismaBreakoutRoom[]> {
    return this.prisma.breakoutRoom.findMany(args);
  }
  async breakoutRoom(
    args: Prisma.BreakoutRoomFindUniqueArgs
  ): Promise<PrismaBreakoutRoom | null> {
    return this.prisma.breakoutRoom.findUnique(args);
  }
  async createBreakoutRoom(
    args: Prisma.BreakoutRoomCreateArgs
  ): Promise<PrismaBreakoutRoom> {
    return this.prisma.breakoutRoom.create(args);
  }
  async updateBreakoutRoom(
    args: Prisma.BreakoutRoomUpdateArgs
  ): Promise<PrismaBreakoutRoom> {
    return this.prisma.breakoutRoom.update(args);
  }
  async deleteBreakoutRoom(
    args: Prisma.BreakoutRoomDeleteArgs
  ): Promise<PrismaBreakoutRoom> {
    return this.prisma.breakoutRoom.delete(args);
  }

  async getRoom(parentId: string): Promise<PrismaRoom | null> {
    return this.prisma.breakoutRoom
      .findUnique({
        where: { id: parentId },
      })
      .room();
  }
}
