/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BreakoutRoomService } from "../breakoutRoom.service";
import { BreakoutRoomCreateInput } from "./BreakoutRoomCreateInput";
import { BreakoutRoom } from "./BreakoutRoom";
import { BreakoutRoomFindManyArgs } from "./BreakoutRoomFindManyArgs";
import { BreakoutRoomWhereUniqueInput } from "./BreakoutRoomWhereUniqueInput";
import { BreakoutRoomUpdateInput } from "./BreakoutRoomUpdateInput";

export class BreakoutRoomControllerBase {
  constructor(protected readonly service: BreakoutRoomService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BreakoutRoom })
  async createBreakoutRoom(
    @common.Body() data: BreakoutRoomCreateInput
  ): Promise<BreakoutRoom> {
    return await this.service.createBreakoutRoom({
      data: {
        ...data,

        room: data.room
          ? {
              connect: data.room,
            }
          : undefined,
      },
      select: {
        active: true,
        createdAt: true,
        creator: true,
        id: true,
        name: true,

        room: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BreakoutRoom] })
  @ApiNestedQuery(BreakoutRoomFindManyArgs)
  async breakoutRooms(@common.Req() request: Request): Promise<BreakoutRoom[]> {
    const args = plainToClass(BreakoutRoomFindManyArgs, request.query);
    return this.service.breakoutRooms({
      ...args,
      select: {
        active: true,
        createdAt: true,
        creator: true,
        id: true,
        name: true,

        room: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BreakoutRoom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async breakoutRoom(
    @common.Param() params: BreakoutRoomWhereUniqueInput
  ): Promise<BreakoutRoom | null> {
    const result = await this.service.breakoutRoom({
      where: params,
      select: {
        active: true,
        createdAt: true,
        creator: true,
        id: true,
        name: true,

        room: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BreakoutRoom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBreakoutRoom(
    @common.Param() params: BreakoutRoomWhereUniqueInput,
    @common.Body() data: BreakoutRoomUpdateInput
  ): Promise<BreakoutRoom | null> {
    try {
      return await this.service.updateBreakoutRoom({
        where: params,
        data: {
          ...data,

          room: data.room
            ? {
                connect: data.room,
              }
            : undefined,
        },
        select: {
          active: true,
          createdAt: true,
          creator: true,
          id: true,
          name: true,

          room: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BreakoutRoom })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBreakoutRoom(
    @common.Param() params: BreakoutRoomWhereUniqueInput
  ): Promise<BreakoutRoom | null> {
    try {
      return await this.service.deleteBreakoutRoom({
        where: params,
        select: {
          active: true,
          createdAt: true,
          creator: true,
          id: true,
          name: true,

          room: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
