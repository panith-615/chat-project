/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BreakoutRoom } from "./BreakoutRoom";
import { BreakoutRoomCountArgs } from "./BreakoutRoomCountArgs";
import { BreakoutRoomFindManyArgs } from "./BreakoutRoomFindManyArgs";
import { BreakoutRoomFindUniqueArgs } from "./BreakoutRoomFindUniqueArgs";
import { CreateBreakoutRoomArgs } from "./CreateBreakoutRoomArgs";
import { UpdateBreakoutRoomArgs } from "./UpdateBreakoutRoomArgs";
import { DeleteBreakoutRoomArgs } from "./DeleteBreakoutRoomArgs";
import { Room } from "../../room/base/Room";
import { BreakoutRoomService } from "../breakoutRoom.service";
@graphql.Resolver(() => BreakoutRoom)
export class BreakoutRoomResolverBase {
  constructor(protected readonly service: BreakoutRoomService) {}

  async _breakoutRoomsMeta(
    @graphql.Args() args: BreakoutRoomCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BreakoutRoom])
  async breakoutRooms(
    @graphql.Args() args: BreakoutRoomFindManyArgs
  ): Promise<BreakoutRoom[]> {
    return this.service.breakoutRooms(args);
  }

  @graphql.Query(() => BreakoutRoom, { nullable: true })
  async breakoutRoom(
    @graphql.Args() args: BreakoutRoomFindUniqueArgs
  ): Promise<BreakoutRoom | null> {
    const result = await this.service.breakoutRoom(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BreakoutRoom)
  async createBreakoutRoom(
    @graphql.Args() args: CreateBreakoutRoomArgs
  ): Promise<BreakoutRoom> {
    return await this.service.createBreakoutRoom({
      ...args,
      data: {
        ...args.data,

        room: args.data.room
          ? {
              connect: args.data.room,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => BreakoutRoom)
  async updateBreakoutRoom(
    @graphql.Args() args: UpdateBreakoutRoomArgs
  ): Promise<BreakoutRoom | null> {
    try {
      return await this.service.updateBreakoutRoom({
        ...args,
        data: {
          ...args.data,

          room: args.data.room
            ? {
                connect: args.data.room,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BreakoutRoom)
  async deleteBreakoutRoom(
    @graphql.Args() args: DeleteBreakoutRoomArgs
  ): Promise<BreakoutRoom | null> {
    try {
      return await this.service.deleteBreakoutRoom(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Room, {
    nullable: true,
    name: "room",
  })
  async getRoom(@graphql.Parent() parent: BreakoutRoom): Promise<Room | null> {
    const result = await this.service.getRoom(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
