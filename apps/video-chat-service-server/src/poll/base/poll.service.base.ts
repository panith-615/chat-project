/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Poll as PrismaPoll,
  Option as PrismaOption,
  Room as PrismaRoom,
} from "@prisma/client";

export class PollServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PollCountArgs, "select">): Promise<number> {
    return this.prisma.poll.count(args);
  }

  async polls(args: Prisma.PollFindManyArgs): Promise<PrismaPoll[]> {
    return this.prisma.poll.findMany(args);
  }
  async poll(args: Prisma.PollFindUniqueArgs): Promise<PrismaPoll | null> {
    return this.prisma.poll.findUnique(args);
  }
  async createPoll(args: Prisma.PollCreateArgs): Promise<PrismaPoll> {
    return this.prisma.poll.create(args);
  }
  async updatePoll(args: Prisma.PollUpdateArgs): Promise<PrismaPoll> {
    return this.prisma.poll.update(args);
  }
  async deletePoll(args: Prisma.PollDeleteArgs): Promise<PrismaPoll> {
    return this.prisma.poll.delete(args);
  }

  async findOptions(
    parentId: string,
    args: Prisma.OptionFindManyArgs
  ): Promise<PrismaOption[]> {
    return this.prisma.poll
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .options(args);
  }

  async getRoom(parentId: string): Promise<PrismaRoom | null> {
    return this.prisma.poll
      .findUnique({
        where: { id: parentId },
      })
      .room();
  }
}
