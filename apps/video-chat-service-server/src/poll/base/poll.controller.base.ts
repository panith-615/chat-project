/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PollService } from "../poll.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PollCreateInput } from "./PollCreateInput";
import { Poll } from "./Poll";
import { PollFindManyArgs } from "./PollFindManyArgs";
import { PollWhereUniqueInput } from "./PollWhereUniqueInput";
import { PollUpdateInput } from "./PollUpdateInput";
import { OptionFindManyArgs } from "../../option/base/OptionFindManyArgs";
import { Option } from "../../option/base/Option";
import { OptionWhereUniqueInput } from "../../option/base/OptionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PollControllerBase {
  constructor(
    protected readonly service: PollService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Poll })
  @nestAccessControl.UseRoles({
    resource: "Poll",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPoll(@common.Body() data: PollCreateInput): Promise<Poll> {
    return await this.service.createPoll({
      data: {
        ...data,

        room: data.room
          ? {
              connect: data.room,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        question: true,

        room: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Poll] })
  @ApiNestedQuery(PollFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Poll",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async polls(@common.Req() request: Request): Promise<Poll[]> {
    const args = plainToClass(PollFindManyArgs, request.query);
    return this.service.polls({
      ...args,
      select: {
        createdAt: true,
        id: true,
        question: true,

        room: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Poll })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Poll",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async poll(
    @common.Param() params: PollWhereUniqueInput
  ): Promise<Poll | null> {
    const result = await this.service.poll({
      where: params,
      select: {
        createdAt: true,
        id: true,
        question: true,

        room: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Poll })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Poll",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePoll(
    @common.Param() params: PollWhereUniqueInput,
    @common.Body() data: PollUpdateInput
  ): Promise<Poll | null> {
    try {
      return await this.service.updatePoll({
        where: params,
        data: {
          ...data,

          room: data.room
            ? {
                connect: data.room,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          question: true,

          room: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Poll })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Poll",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePoll(
    @common.Param() params: PollWhereUniqueInput
  ): Promise<Poll | null> {
    try {
      return await this.service.deletePoll({
        where: params,
        select: {
          createdAt: true,
          id: true,
          question: true,

          room: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/options")
  @ApiNestedQuery(OptionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Option",
    action: "read",
    possession: "any",
  })
  async findOptions(
    @common.Req() request: Request,
    @common.Param() params: PollWhereUniqueInput
  ): Promise<Option[]> {
    const query = plainToClass(OptionFindManyArgs, request.query);
    const results = await this.service.findOptions(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,

        poll: {
          select: {
            id: true,
          },
        },

        text: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/options")
  @nestAccessControl.UseRoles({
    resource: "Poll",
    action: "update",
    possession: "any",
  })
  async connectOptions(
    @common.Param() params: PollWhereUniqueInput,
    @common.Body() body: OptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      options: {
        connect: body,
      },
    };
    await this.service.updatePoll({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/options")
  @nestAccessControl.UseRoles({
    resource: "Poll",
    action: "update",
    possession: "any",
  })
  async updateOptions(
    @common.Param() params: PollWhereUniqueInput,
    @common.Body() body: OptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      options: {
        set: body,
      },
    };
    await this.service.updatePoll({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/options")
  @nestAccessControl.UseRoles({
    resource: "Poll",
    action: "update",
    possession: "any",
  })
  async disconnectOptions(
    @common.Param() params: PollWhereUniqueInput,
    @common.Body() body: OptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      options: {
        disconnect: body,
      },
    };
    await this.service.updatePoll({
      where: params,
      data,
      select: { id: true },
    });
  }
}
