/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Poll } from "./Poll";
import { PollCountArgs } from "./PollCountArgs";
import { PollFindManyArgs } from "./PollFindManyArgs";
import { PollFindUniqueArgs } from "./PollFindUniqueArgs";
import { DeletePollArgs } from "./DeletePollArgs";
import { PollService } from "../poll.service";
@graphql.Resolver(() => Poll)
export class PollResolverBase {
  constructor(protected readonly service: PollService) {}

  async _pollsMeta(
    @graphql.Args() args: PollCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Poll])
  async polls(@graphql.Args() args: PollFindManyArgs): Promise<Poll[]> {
    return this.service.polls(args);
  }

  @graphql.Query(() => Poll, { nullable: true })
  async poll(@graphql.Args() args: PollFindUniqueArgs): Promise<Poll | null> {
    const result = await this.service.poll(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Poll)
  async deletePoll(@graphql.Args() args: DeletePollArgs): Promise<Poll | null> {
    try {
      return await this.service.deletePoll(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
